---
import Page from "../layouts/Page.astro";
---

<Page pageTitle="cURL HTTP Tool">
  <h1>cURL HTTP command generator</h1>
  <div class="grid">
    <form id="curl-http-gen">
      <fieldset>
        <legend>Method and URL</legend>
        <div role="group">
          <select id="method" required>
            <option>GET</option>
            <option>POST</option>
            <option>PUT</option>
            <option>PATCH</option>
            <option>DELETE</option>
            <option>HEAD</option>
            <option>OPTIONS</option>
          </select>
          <input type="url" id="url" value="https://" required />
        </div>
      </fieldset>
      <label for="headers">Headers</label>
      <div id="headers">
        <input placeholder="Header-Name: Value" />
      </div>
      <button type="button" class="secondary" id="add-header" disabled
        >Add header</button
      >
      <fieldset>
        <input type="checkbox" id="newline" checked />
        <label for="newline">Newline?</label>
        <input type="checkbox" id="status" checked />
        <label for="status">Status code?</label>
      </fieldset>
      <label for="data">
        Body
        <textarea
          id="data"
          placeholder="This method shouldn't have a body"
          rows="3"
          disabled></textarea>
      </label>
      <button type="submit">Generate cURL command</button>
    </form>
    <div class="command">
      <h3>Generated cURL command</h3>
      <textarea
        id="command"
        placeholder="Your generated cURL command will appear here!"
        rows="3"
        readonly></textarea>
      <button id="to-clipboard" disabled>Copy to clipboard</button>
    </div>
  </div>
</Page>
<script>
  const headers = document.getElementById("headers");
  const selectMethod = document.getElementById("method");
  const data = document.getElementById("data");
  const command = document.getElementById("command");

  // Disable add header button if there's an empty header input
  headers.addEventListener("input", (event) => {
    if (event.target.tagName === "INPUT") {
      const inputs = Array.from(headers.querySelectorAll("input"));
      const anyEmpty = inputs.some((input) => input.value.trim() === "");
      if (anyEmpty) {
        document.getElementById("add-header").setAttribute("disabled", "");
      } else {
        document.getElementById("add-header").removeAttribute("disabled");
      }
    }
  });

  // Disable data input if the method shouldn't have a body
  selectMethod.addEventListener("change", (event) => {
    const method = document.getElementById("method").value;
    if (method === "POST" || method === "PUT" || method === "PATCH") {
      data.removeAttribute("disabled");
      data.placeholder = '{\n  "request":"body"\n}';
    } else {
      data.setAttribute("disabled", "");
      data.placeholder = "This method shouldn't have a body";
    }
  });

  // Use Tab and Shift + Tab for indentation
  function precisionReplace(string, index, replacement, length = 1) {
    return string.slice(0, index) + replacement + string.slice(index + length);
  }

  data.addEventListener("keydown", (keypress) => {
    if (keypress.key === "Tab") {
      keypress.preventDefault();
      const cursor = data.selectionStart;
      const text = data.value;

      if (keypress.shiftKey) {
        if (!text) return;

        const lineStart = text.lastIndexOf("\n", cursor) + 1;
        const firstTwoChars = text.slice(lineStart, lineStart + 2);
        let indent = 0;
        while (firstTwoChars[indent] === " ") {
          indent++;
        }
        if (indent) {
          data.value = precisionReplace(text, lineStart, "", indent);
          const newCursor =
            cursor - indent < lineStart ? lineStart : cursor - indent;
          data.setSelectionRange(newCursor, newCursor);
        }
      } else {
        data.value = precisionReplace(text, cursor, "  ", 0);
        data.setSelectionRange(cursor + 2, cursor + 2);
      }
    }
  });

  // Dynamic textarea resizing
  data.addEventListener("input", (event) => {
    const textbox = event.target;
    textbox.style.height = "auto";
    textbox.style.height = textbox.scrollHeight + "px";
  });

  // "Add Header" button
  document
    .getElementById("add-header")
    .addEventListener("click", function (event) {
      const newHeaderInput = document.createElement("input");
      newHeaderInput.placeholder = "Header-Name: Value";
      headers.appendChild(newHeaderInput);
      document.getElementById("add-header").setAttribute("disabled", "");
    });

  // Generate cURL command
  document
    .getElementById("curl-http-gen")
    .addEventListener("submit", function (event) {
      event.preventDefault();
      const method = document.getElementById("method").value;
      const url = document.getElementById("url").value;
      const headerValues = Array.from(
        headers.querySelectorAll("input"),
        (input) => input.value,
      ).filter((value) => value !== "");
      const status = document.getElementById("status").checked;
      const newline = document.getElementById("newline").checked;

      let generated_command = "curl";
      if (method !== "GET") generated_command += " -X " + method;
      generated_command += " " + url;
      headerValues.forEach((header) => {
        generated_command += ` \\\n -H "${header}"`;
      });
      if (!data.hasAttribute("disabled") && data.value) {
        generated_command += ` \\\n -d "${data.value}"`;
      }
      if (newline || status) {
        generated_command += ' \\\n -w "';
        if (status) generated_command += "\\n %{http_code}";
        if (newline) generated_command += "\\n";
        generated_command += '"';
      }

      command.value = generated_command;
      command.style.height = "auto";
      command.style.height = command.scrollHeight + "px";
      document.getElementById("to-clipboard").removeAttribute("disabled");
    });

  // Copy cURL command to clipboard
  document
    .getElementById("to-clipboard")
    .addEventListener("click", function (event) {
      navigator.clipboard
        .writeText(command.value)
        .then(() => {
          alert(`cURL command copied to the clipboard:\n${command.value}`);
        })
        .catch((err) => {
          alert("Failed to copy to clipboard: ", err);
        });
    });
</script>
<style>
  fieldset > div {
    margin-bottom: 0;
  }

  #method {
    width: fit-content;
  }

  button {
    width: 100%;
  }

  textarea {
    overflow-y: hidden;
    resize: none;
    font-family: monospace;
  }
</style>
